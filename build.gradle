/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'java'
    id 'eclipse'
    id 'application'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id "com.github.spotbugs" version "4.6.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

//version = '1.2.1'

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.6"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    flatDir { dirs 'libreria'}
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.2-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    // https://mvnrepository.com/artifact/com.toedter/jcalendar
	compile group: 'com.toedter', name: 'jcalendar', version: '1.4'
}

application {
    // Define the main class for the application.
    mainClassName = 'pruebaGradle.Main'
}

test {
    // Use junit platform for unit tests
    //useJUnitPlatform()
       testLogging{
       //events "passed", "skipped", "failed"
        	events "failed"
        	exceptionFormat "short"
    }
    jacoco {
       destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
       classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.1
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

checkstyle {
    ignoreFailures = true
    toolVersion = '6.7'
    configFile file("config/checkstyle/checkstyle.xml")
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

pmd {
    ignoreFailures = true
}

tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugs {
   ignoreFailures = true
   toolVersion = "4.1.4"
   effort = "max"
   reportLevel = "high"
}

spotbugsMain {
reports {
    xml.enabled = false
    html.enabled = true
    }
}


jar{
     manifest{
         attributes 'Main-Class': 'pruebaGradle.Main'
     }
}